# child selection rule ('d'own, 'u'p, 'p'seudo costs, 'i'nference, 'l'p value, 'r'oot LP value difference, 'h'ybrid inference/root LP value difference)
# [type: char, range: {dupilrh}, default: h]
# nodeselection/childsel = p

# verbosity level of output
# [type: int, advanced: FALSE, range: [0,5], default: 4]
display/verblevel = 3

# frequency for displaying node information lines
# [type: int, range: [-1,2147483647], default: 100]
display/freq = 1000

# solving stops, if the given number of nodes was processed since the last improvement of the primal solution value (-1: no limit)
# [type: longint, range: [-1,9223372036854775807], default: -1]
# limits/stallnodes = 5000

# maximal time in seconds to run
# [type: real, range: [0,1.79769313486232e+308], default: 1e+20]
# limits/time = 10

# solving stops, if the relative gap = |primal - dual|/MIN(|dual|,|primal|) is below the given value
# [type: real, range: [0,1.79769313486232e+308], default: 0]
limits/gap = .5e-01

# verblevel of the nlp solver, can be 0 or 1
# [type: int, range: [0,1], default: 0]
# heuristics/dualval/nlpverblevel = 1

# name of an NLP solver specific options file
# [type: string, default: ""]
# heuristics/subnlp/nlpoptfile = "ipopt4scip.opt"

# maximal memory usage in MB; reported memory usage is lower than real memory usage!
# [type: real, range: [0,1.79769313486232e+308], default: 1e+20]
limits/memory = 29000

# fraction of maximal memory usage resulting in switch to memory saving mode
# [type: real, advanced: FALSE, range: [0,1], default: 0.8]
memory/savefac = 0.8

# if solve exceeds this number of nodes for the first time, an automatic restart is triggered (-1: no automatic restart)
# [type: int, range: [-1,2147483647], default: -1]
# limits/autorestartnodes = 1120000

# maximal number of saved nodes
# [type: int, range: [-1,2147483647], default: 2147483647]
# reoptimization/maxsavednodes = 1280000

# the minimum number of threads used during parallel solve
# [type: int, advanced: FALSE, range: [0,64], default: 1]
parallel/minnthreads = 4

